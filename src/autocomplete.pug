doctype html
- var title = 'Traductor de cartas de HearthStone v' + version
html(lang='es')
  head
    meta(charset='utf-8')
    title= title
    link(rel='stylesheet', href=url_awesomplete_css)
    style(type="text/css").
      body {
        background: black;
      }
      .main-wrapper {
        background: rgb(233,233,233);
        max-width: 800px;
        min-width: 500px;
        margin-left: auto;
        margin-right: auto;
        padding: 20px;
      }
      h1 {
        text-align: center;
        font-size: 1.4em;
        color: rgb(60, 60, 60);
      }
      table {
        width: 100%;
      }
      table, th, td {
        border: 1px solid black;
        border-collapse: collapse;
        padding: 10px;
      }
      td:first-child {
        white-space: nowrap;
      }
      td:last-child {
        width: 99%;
      }
      footer {
        text-align: center;
      }
      footer a {
        font-size: 0.6em;
        color: rgb(150, 150, 150);
      }
  body
    div.main-wrapper
      h1= title
      table
        tr
          th
          th Origen
          th Destino
        tr
          td Lenguaje
          td
            select#sourceLanguage
              each language in allLanguages
                option(value=language, selected=(language==defaultSourceLanguage)) #{language}
          td
            select#targetLanguage
              each language in allLanguages
                option(value=language, selected=(language==defaultTargetLanguage)) #{language}
        tr
          td Nombre de la carta
          td
            input#cardNames.awesomplete(placeholder='Nombre de la carta a traducir', size='25')
          td
            div#result
      footer
         a(href="https://github.com/protron") Developed by Mariano Desanze
    script(src=url_awesomplete_js)
    script.
      var nameTranslations;
      var awesomplete;
      function updateResult() {
        let translatedName = '';
        const selectedCard = awesomplete.input.value;
        if (selectedCard) {
          const translations = nameTranslations[selectedCard];
          if (!translations) {
            console.log(`No entry found for card '${selectedCard}'`);
          } else {
            const selectedTargetLang = document.getElementById("targetLanguage").value;
            translatedName = translations[selectedTargetLang];
            if (!translatedName) {
              console.log(`Card '${selectedCard}' found for other languages but not this one.`, translations);
            }
          }
        }
        document.getElementById("result").innerText = translatedName;
      }
      function initAwesomplete() {
        var input = document.getElementById("cardNames");
        awesomplete = new Awesomplete(input);
        awesomplete.minChars = 1;
        awesomplete.autoFirst = true;
        input.addEventListener("awesomplete-selectcomplete", updateResult, true);
      }
      function updateAwesomplete(nameTranslations) {
        var cardOptions = getObjectKeys(nameTranslations);
        awesomplete.list = cardOptions;
      }
      function getObjectKeys(obj) {
        var keys = [];
        for (var key in obj)
          if (obj.hasOwnProperty(key))
            keys.push(key);
        return keys;
      }
      function getUrlTranslations(sourceLanguage) {
        return 'translations-' + sourceLanguage + '.json?v=#{version}' // version in url param just for enforce cache expiration
      }
      function clearTexts() {
        awesomplete.input.value = null;
        document.getElementById("result").textContent = null;
      }
      async function loadTranslations() {
        clearTexts();
        let sourceLanguage = document.getElementById("sourceLanguage").value;
        console.log("Loading translations for " + sourceLanguage);
        let urlTranslations = getUrlTranslations(sourceLanguage);
        let jsFileContent = await fetch(urlTranslations);
        let data = await jsFileContent.json();
        nameTranslations = data;
        updateAwesomplete(nameTranslations);
        console.log("Loaded translations for " + sourceLanguage);
      }
      function onSourceLangChange() {
        loadTranslations();
      }
      function onTargetLangChange() {
        updateResult();
      }
      async function init() {
        initAwesomplete();
        document.getElementById("sourceLanguage").addEventListener("change", onSourceLangChange);
        await loadTranslations();
        document.getElementById("targetLanguage").addEventListener("change", onTargetLangChange);
      }
      init();
